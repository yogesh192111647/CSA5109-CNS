#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to prepare the Playfair matrix
void preparePlayfairMatrix(char matrix[5][5]) {
    char key[] = "MFHIJKUNOPQZVWXYELARGBDSTC";
    int i, j, k = 0;
    int charPresent[26] = {0};

    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            while (charPresent[key[k] - 'A']) {
                k++;
            }
            matrix[i][j] = key[k];
            charPresent[key[k] - 'A'] = 1;
            k++;
        }
    }
}

// Function to find the positions of two characters in the Playfair matrix
void findPositions(char matrix[5][5], char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to encrypt a message using the Playfair cipher
void playfairEncrypt(char matrix[5][5], char *message, int len) {
    int i;
    char first, second;
    int row1, col1, row2, col2;

    for (i = 0; i < len; i += 2) {
        first = message[i];
        second = message[i + 1];

        if (first == second) {
            second = 'X';
            i--;
        }

        findPositions(matrix, first, &row1, &col1);
        findPositions(matrix, second, &row2, &col2);

        if (row1 == row2) {
            col1 = (col1 + 1) % 5;
            col2 = (col2 + 1) % 5;
        } else if (col1 == col2) {
            row1 = (row1 + 1) % 5;
            row2 = (row2 + 1) % 5;
        } else {
            int temp = col1;
            col1 = col2;
            col2 = temp;
        }

        printf("%c%c", matrix[row1][col1], matrix[row2][col2]);
    }
    printf("\n");
}

int main() {
    char playfairMatrix[5][5];
    preparePlayfairMatrix(playfairMatrix);

    char message[] = "MustseeyouoverCadoganWestComingatonce";
    int len = strlen(message);

    printf("Original message: %s\n", message);
    printf("Encrypted message: ");
    
    playfairEncrypt(playfairMatrix, message, len);

    return 0;
}
